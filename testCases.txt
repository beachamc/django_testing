1. test number or ID
2. requirement being tested
3. component being tested
4. method being tested
5. test input(s) including command-line argument(s)
6. expected outcome(s)

Method 1 
paginator_default 
Paginator([1,2,3,4],2) 
validate_number(n) 
[1,hi,0,-1,3] 
[1,PageNotAnInteger,EmptyPage,EmptyPage,EmptyPage]

Method 2
paginator_empty_first_page 
Paginator([], allow_empty_first_page=?) 
validate_number(n) 
[{True,1}, {True,3}, {False,1}, {False,3}, {True,0}]
[1,EmptyPage,EmptyPage,EmptyPage,EmptyPage]

## Starting here we need to add another constructor for the Page() object
## for this one I assumed we created the Paginator as paginator
## ie. paginator = Paginator([1,2,3,4,5,6,7,8,9,10], 3, input)

Method 3
paginator_orphans
Paginator([1,2,3,4,5,6,7,8,9,10], 3, orphans=?)
Page([],1,paginator)
page.next_page_number()
[{0,4},{1,4},{0,3},{1,3},{2,2}] 
[EmptyPage,EmptyPage,4,EmptyPage,3]

Method 4
page_has_next 
Paginator([1,2,3,4,5], 1) 
Page([],?).has_next()
[1,3,4,5,0] 
[True, True, True, False, False]

Method 5
page_has_previous 
Paginator([1,2,3,4,5,6], 3) 
Page([],?).has_previous()
[1,3,4,5,0] 
[False, True, True, True, False]
